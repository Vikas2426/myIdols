{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/searchbox/SearchBox.component.jsx","components/errorboundary/ErrorBoundary.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","href","idol","wiki","target","rel","src","image","alt","width","height","name","CardList","idols","map","key","id","link","SearchBox","searchChange","type","placeholder","onChange","ErrorBoundary","state","hasError","error","info","this","setState","children","Component","App","onSearchChange","event","searchField","value","filter","toLowerCase","includes","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2uDAGaA,G,YAAO,SAACC,GACnB,OACE,uBACEC,UAAU,iBACVC,KAAMF,EAAMG,KAAKC,KACjBC,OAAO,SACPC,IAAI,uBAEJ,6BACE,yBACEC,IAAKP,EAAMG,KAAKK,MAChBC,IAAI,QACJC,MAAM,MACNC,OAAO,QAET,4BAAKX,EAAMG,KAAKS,UCbXC,EAAW,SAACb,GAAW,IAC5Bc,EAAUd,EAAVc,MACN,OACE,yBAAKb,UAAU,aACZa,EAAMC,KAAI,SAACZ,GAAD,OACT,kBAAC,EAAD,CAAMa,IAAKb,EAAKc,GAAId,KAAMA,EAAMe,KAAMf,EAAKC,YCIpCe,G,MAXG,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aACnB,OACE,2BACEnB,UAAU,eACVoB,KAAK,SACLC,YAAY,SACZC,SAAUH,MCeDI,E,kDArBb,WAAYxB,GAAQ,IAAD,8BACjB,cAAMA,IACDyB,MAAQ,CACXC,UAAU,GAHK,E,8DAODC,EAAOC,GACvBC,KAAKC,SAAS,CACZJ,UAAU,M,+BAIZ,OAAIG,KAAKJ,MAAMC,SACN,kDAEAG,KAAK7B,MAAM+B,a,GAjBIC,aC0CbC,E,kDApCb,WAAYjC,GAAQ,IAAD,8BACjB,cAAMA,IAORkC,eAAiB,SAACC,GAChB,EAAKL,SAAS,CACZM,YAAaD,EAAM9B,OAAOgC,SAR5B,EAAKZ,MAAQ,CACXX,MAAOA,EACPsB,YAAa,IAJE,E,qDAcT,IAAD,OAKP,OACE,yBAAKnC,UAAU,OACb,uCACA,kBAAC,EAAD,CAAWmB,aAAcS,KAAKK,iBAC9B,kBAAC,EAAD,KACE,kBAAC,EAAD,CACEpB,MAAOe,KAAKJ,MAAMX,MAAMwB,QAAO,SAACnC,GAAD,OAC7BA,EAAKS,KAAK2B,cAAcC,SAAS,EAAKf,MAAMW,wB,GA3BxCJ,aCKES,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.1bc2565d.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./card.styles.css\";\n\nexport const Card = (props) => {\n  return (\n    <a\n      className=\"card-container\"\n      href={props.idol.wiki}\n      target=\"_blank\"\n      rel=\"noopener noreferrer\"\n    >\n      <div>\n        <img\n          src={props.idol.image}\n          alt=\"robot\"\n          width=\"150\"\n          height=\"201\"\n        ></img>\n        <h1>{props.idol.name}</h1>\n      </div>\n    </a>\n  );\n};\n","import React from \"react\";\n// import idols from \"../../Assets/idols.json\";\nimport \"./card-list.styles.css\";\nimport { Card } from \"../card/card.component.jsx\";\n\nexport const CardList = (props) => {\n  let { idols } = props;\n  return (\n    <div className=\"card-list\">\n      {idols.map((idol) => (\n        <Card key={idol.id} idol={idol} link={idol.wiki} />\n      ))}\n    </div>\n  );\n};\n","import React from \"react\";\nimport \"./SearchBox.css\";\n\nconst SearchBox = ({ searchChange }) => {\n  return (\n    <input\n      className=\"searchbox tc\"\n      type=\"search\"\n      placeholder=\"Search\"\n      onChange={searchChange}\n    />\n  );\n};\n\nexport default SearchBox;\n","import React, { Component } from \"react\";\n\nclass ErrorBoundary extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasError: false,\n    };\n  }\n\n  componentDidCatch(error, info) {\n    this.setState({\n      hasError: true,\n    });\n  }\n  render() {\n    if (this.state.hasError) {\n      return <h1>Uh Oh Spagettioes!</h1>;\n    } else {\n      return this.props.children;\n    }\n  }\n}\n\nexport default ErrorBoundary;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport idols from \"./Assets/idols.json\";\nimport { CardList } from \"./components/card-list/card-list.component.jsx\";\nimport SearchBox from \"./components/searchbox/SearchBox.component.jsx\";\nimport ErrorBoundary from \"./components/errorboundary/ErrorBoundary.component.jsx\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      idols: idols,\n      searchField: \"\",\n    };\n  }\n\n  onSearchChange = (event) => {\n    this.setState({\n      searchField: event.target.value,\n    });\n  };\n\n  render() {\n    // let filteredIdols = this.state.idols.filter((idol) =>\n    //   idol.name.toLowerCase().includes(this.state.searchField)\n    // );\n\n    return (\n      <div className=\"App\">\n        <p>My Idols</p>\n        <SearchBox searchChange={this.onSearchChange} />\n        <ErrorBoundary>\n          <CardList\n            idols={this.state.idols.filter((idol) =>\n              idol.name.toLowerCase().includes(this.state.searchField)\n            )}\n          />\n        </ErrorBoundary>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}